;
(function() {
    const calcWidth = item => {
        let reqItemWidth = 0;
        const screenWidth = $(window).width();
        const container = item.closest(".horizontal-accordion__list");
        const titleBloks = container.find(".horizontal-accordion__link");
        const titleWidth = titleBloks.width() * titleBloks.length;
        const textBlockWidth = screenWidth - titleBloks.width();
        const textBlock = item.find(".horizontal-accordion__text-content");
        const paddingLeft = parseInt(textBlock.css("padding-left"));
        const paddingRight = parseInt(textBlock.css("padding-right"));
        const isTablet = window.matchMedia("(max-width: 768px)").matches;
        const isPhone = window.matchMedia("(max-width: 480px)").matches;
        if (isPhone) {
            reqItemWidth = textBlockWidth;
        } else if (isTablet) {
            reqItemWidth = screenWidth - titleWidth
        } else {
            reqItemWidth = 524;
        }
        return {
            container: reqItemWidth,
            textContainer: reqItemWidth - paddingLeft - paddingRight
        }

    }
    const closeEveryItem = container => {
        const items = container.find(".horizontal-accordion__text");
        const itemContainer = container.find(".horizontal-accordion__item");
        itemContainer.removeClass("active");
        itemContainer.removeClass("horizontal-accordion__item--phone");
        items.width(0);
    }

    const openItem = (item) => {
        const itemContainer = item.closest(".horizontal-accordion__item");
        const contentBlock = item.find(".horizontal-accordion__text");
        const textBlock = item.find(".horizontal-accordion__text-content");
        const reqWidth = calcWidth(item);
        const isPhone = window.matchMedia("(max-width: 480px)").matches;
        itemContainer.addClass("active");
        contentBlock.width(reqWidth.container);
        textBlock.width(reqWidth.textContainer);
        if (isPhone) {
            itemContainer.addClass("horizontal-accordion__item--phone");
        }


    }
    $(".horizontal-accordion__link").on("click", e => {
        e.preventDefault();
        const $this = $(e.currentTarget);
        const item = $this.closest(".horizontal-accordion__item");
        const container = item.closest(".horizontal-accordion__list");
        if (item.hasClass("active")) {
            closeEveryItem(container);
        } else {
            closeEveryItem(container);
            openItem(item);
        }
    });
})();;
(function() {
    let myMap;
    const init = () => {
        myMap = new ymaps.Map("map", {
            center: [56.828371, 60.624425],
            zoom: 12,
            controls: []
        });
        const coords = [
            [56.828371, 60.624425],
            [56.844763, 60.590410],
            [56.825718, 60.606615],
            [56.801371, 60.563919],
            [56.893155, 60.572331]
        ];
        const myCollection = new ymaps.GeoObjectCollection({}, {
            draggable: false,
            iconLayout: 'default#image',
            iconImageHref: './images/marker.svg',
            iconImageSize: [46, 57],
            iconImageOffset: [-35, -52]
        });
        coords.forEach(coord => {
            myCollection.add(new ymaps.Placemark(coord));
        });
        myMap.geoObjects.add(myCollection);
        myMap.behaviors.disable('scrollZoom');
    }
    ymaps.ready(init);
})()
let myMap;
const init = () => {
    myMap = new ymaps.Map("map", {
        center: [56.828371, 60.624425],
        zoom: 12,
        controls: []
    });
    const coords = [
        [56.828371, 60.624425],
        [56.844763, 60.590410],
        [56.825718, 60.606615],
        [56.801371, 60.563919],
        [56.893155, 60.572331]
    ];
    const myCollection = new ymaps.GeoObjectCollection({}, {
        draggable: false,
        iconLayout: 'default#image',
        iconImageHref: './images/marker.svg',
        iconImageSize: [46, 57],
        iconImageOffset: [-35, -52]
    });
    coords.forEach(coord => {
        myCollection.add(new ymaps.Placemark(coord));
    });
    myMap.geoObjects.add(myCollection);
    myMap.behaviors.disable('scrollZoom');
}
ymaps.ready(init);;;
(function() {
    const closeNav = document.querySelector(".cross");
    const openNav = document.querySelector(".burger");
    const nav = document.querySelector("active");

    openNav.addEventListener('click', e => {
        e.preventDefault();
        document.getElementsByClassName('active')[0].style.display = "flex";
        document.getElementsByTagName('body')[0].style.overflow = "hidden";
    });

    closeNav.addEventListener('click', e => {
        e.preventDefault();
        document.getElementsByClassName('active')[0].style.display = "none";
        document.getElementsByTagName('body')[0].style.overflow = "scroll";
    });
})();;
(function() {
    const validateFields = (form, fieldsArray) => {
        fieldsArray.forEach(field => {
            field.removeClass("input-error");
            if (field.val().trim() == "") {
                field.addClass("input-error");
            }
        });

        const errorFields = form.find('.input-error');
        return errorFields.length == 0;
    }

    $('.form').submit(e => {
        e.preventDefault();
        const form = $(e.currentTarget);
        const name = form.find("[name='name']");
        const phone = form.find("[name='phone']");
        const comment = form.find("[name='comment']");
        const to = form.find("[name='to']");

        const modal = $('#modal');
        const content = modal.find('.modal__message')

        const isValid = validateFields(form, [name, phone, comment, to]);

        if (isValid) {
            const request = $.ajax({
                url: 'https://webdev-api.loftschool.com/sendmail',
                method: 'post',
                data: {
                    name: name.val(),
                    phone: phone.val(),
                    comment: comment.val(),
                    to: to.val(),
                },
            });
            request.done(data => {
                content.text(data.message);
                content.removeClass('error-modal');
            });
            request.fail(data => {
                console.log(data.responseJSON.message);
                const message = data.responseJSON.message;
                content.text(message);
                content.addClass('error-modal');
            });
            request.always(() => {
                $.fancybox.open({
                    src: "#modal",
                    type: "inline",

                });
            })
        }
    });

    $(".app-close-modal").click(e => {
        e.preventDefault();
        $.fancybox.close();

    });
})();;
(function() {
    const sections = $("section");
    const display = $(".maincontent");
    const fixMenu = $(".fixed-menu");
    const menuItems = fixMenu.find(".fixed-menu__item");
    const mobileDetect = new MobileDetect(window.navigator.userAgent);
    const isMobile = mobileDetect.mobile();
    let inScroll = false;

    sections.first().addClass("active-section");
    const countSectionPosition = sectionEq => {
        const position = sectionEq * -100;
        if (isNaN(position)) {
            console.error("Передано не верное значение в countSectionPosition");
            return 0;
        }
        return position;

    };
    const changeMenuThemeForSection = sectionEq => {
        const currentSection = sections.eq(sectionEq);
        const menuTheme = currentSection.attr("data-fix-menu-color");
        const activeClass = "fixed-menu--white";

        if (menuTheme == "light") {
            fixMenu.addClass(activeClass);
        } else {
            fixMenu.removeClass(activeClass);
        }

    };
    const resetActiveClassForItem = (items, itemEq, activeClass) => {
        items.eq(itemEq).addClass(activeClass).siblings().removeClass(activeClass);
    }

    const performTransiton = (sectionEq) => {
        if (inScroll) return;
        const transitionOver = 1000;
        const mouseInertiaOver = 300;
        inScroll = true;
        const position = countSectionPosition(sectionEq);
        changeMenuThemeForSection(sectionEq);

        display.css({
            transform: `translateY(${position}%)`
        });
        resetActiveClassForItem(sections, sectionEq, "active-section");

        setTimeout(() => {
            inScroll = false;
            resetActiveClassForItem(menuItems, sectionEq, "fixed-menu__item--active");

        }, transitionOver + mouseInertiaOver);
    };



    const vieportScroller = () => {
        const activeSection = sections.filter(".active-section");
        const nextSection = activeSection.next();
        const prevSection = activeSection.prev();

        return {
            next() {
                if (nextSection.length) {
                    performTransiton(nextSection.index());
                }
            },
            prev() {
                if (prevSection.length) {
                    performTransiton(prevSection.index());
                }
            }
        }
    }

    $(window).on("wheel", e => {
        const deltaY = e.originalEvent.deltaY;
        const scroller = vieportScroller();
        if (deltaY > 0) {
            scroller.next();
        }
        if (deltaY < 0) {
            scroller.prev();
        }
    });
    $(window).on("keydown", e => {
        const tagName = e.target.tagName.toLowerCase();
        const userTypingInInputs = tagName == tagName == "input" || tagName == "textarea";
        const scroller = vieportScroller();
        if (userTypingInInputs) return;
        switch (e.keyCode) {
            case 38:
                scroller.prev;
                break;
            case 40:
                scroller.next;
                break;
        }
    });
    $("wrapper").on("touchmove", e => e.preventDefault());

    $("[data-scroll-to]").click(e => {
        e.preventDefault();
        const nav = $(".active")
        const $this = $(e.currentTarget);
        const target = $this.attr("data-scroll-to");
        const reqSection = $(`[data-section-id=${target}]`);
        nav.css({ display: "none" });
        performTransiton(reqSection.index());
    });
    if (isMobile) {
        $("body").swipe({

            swipe: function(event, direction) {
                const scroller = vieportScroller();
                let scrollDirection = "";
                if (direction == "up") scrollDirection = "next";
                if (direction == "down") scrollDirection = "prev";

                scroller[scrollDirection]();
            },
        });
    }
})();;
(function() {
    const player = $(".player__content");
    const durationControl = document.querySelector(".player__playback-duration");
    const controlProgress = document.querySelector(".player__playback-progress")
    const soundProgress = document.querySelector(".player__sound-progress");
    const soundControl = document.querySelector(".player__sound-volume-level");
    const MAX_SOUND_VALUE = 10;
    const updateRange = 1000;
    const playButtonOnScreen = document.querySelector(".player__on-screen-start");
    const playerButton = document.querySelector(".player__start");
    const playerContainer = document.querySelector(".player__container");
    const playerWrapper = document.querySelector(".player__wrapper");
    const soundButton = document.querySelector(".player__sound-img");
    let intervalId;
    let soundLevel;

    document.addEventListener("DOMContentLoaded", function() {
        player[0].addEventListener("canplaythrough", () => {
            durationControl.max = player[0].duration;
        });
        durationControl.min = 0;
        durationControl.value = 0;
        durationControl.max = player[0].duration;
        soundControl.min = 0;
        soundControl.max = MAX_SOUND_VALUE;
        volumeProgress();
        initPlayButton();
        addListener();
    });

    function initPlayButton() {
        const playButtons = document.querySelectorAll(".play-button");
        playButtons.forEach(button => {
            button.addEventListener("click", playStop)
            progressPlayback();
        });
    };

    function addListener() {
        playerWrapper.addEventListener("click", playStop);
        durationControl.addEventListener("click", setVideoDuration);
        durationControl.addEventListener("mousedown", stopInterval);
        soundControl.addEventListener("click", changeSoundVolume);

        soundButton.addEventListener("click", e => {
            e.preventDefault();
            if (player[0].volume == 0) {
                player[0].volume = soundLevel;
                soundControl.value = soundLevel * MAX_SOUND_VALUE;
                soundButton.classList.remove("player__sound-img--mute");
                volumeProgress();

            } else {
                soundLevel = player[0].volume;
                player[0].volume = 0;
                soundControl.value = 0;
                soundButton.classList.add("player__sound-img--mute");
                volumeProgress();
            }
        });
    }

    function playStop() {
        if (player[0].paused) {
            intervalId = setInterval(updateDuration, updateRange);
            player[0].play();
            playButtonOnScreen.classList.add("player__on-screen-start--hidden");
            playerContainer.classList.add("player__container--paused");


        } else {
            stopInterval();
            playButtonOnScreen.classList.remove("player__on-screen-start--hidden");
            playerContainer.classList.remove("player__container--paused");
        }
    }

    function updateDuration() {
        durationControl.value = player[0].currentTime;
        progressPlayback();
    }

    function setVideoDuration() {
        intervalId = setInterval(updateDuration, updateRange);
        player[0].currentTime = durationControl.value;
        progressPlayback();
        if (player[0].paused) {
            player[0].play();
            playButtonOnScreen.classList.add("player__on-screen-start--hidden");
            console.log(player[0].volume);
        }

    }

    function stopInterval() {
        player[0].pause();
        clearInterval(intervalId);
    };

    function changeSoundVolume() {
        player[0].volume = soundControl.value / MAX_SOUND_VALUE;
        volumeProgress();
    }

    function progressPlayback() {
        const completePlaybackPersent = (player[0].currentTime / player[0].duration) * 100;
        controlProgress.style.width = completePlaybackPersent + "%";
    }

    function volumeProgress() {
        completeVolumePersent = (player[0].volume / MAX_SOUND_VALUE) * 1000;
        soundProgress.style.width = completeVolumePersent + "%";
    }
})();;
(function() {
    const slider = $('.slider__list').bxSlider({
        pager: false,
        controls: false,
        //touchEnabled: false
    });

    $('.slider__button--left').click(e => {
        e.preventDefault();
        slider.goToPrevSlide();
    })
    $('.slider__button--right').click(e => {
        e.preventDefault();
        slider.goToNextSlide();
    });

})();;
(function() {
    const findBlock = (alias) => {
        return $('.reviews__item').filter((ndx, item) => {
            return $(item).attr('data-linked-with') == alias;
        });
    };
    $('.interactive-avatar__link').click((e) => {
        e.preventDefault();
        const $this = $(e.currentTarget);
        const target = $this.attr('data-open');
        const showItem = findBlock(target);
        const currrentItem = $this.closest('.reviews__selector-item')
        showItem.addClass('reviews__item--active').siblings().removeClass('reviews__item--active')
        currrentItem.addClass('interactive-avatar--active').siblings().removeClass('interactive-avatar--active');
    })
})();;
(function() {
    $(document).ready(function() {
        let name = $('.member__name');
        name.on('click', function(e) {
            e.preventDefault();
            let dropDown = $('.member__dropdown');
            dropDown.slideUp(200);
            name.removeClass('member__name--open');
            name.addClass('member__name--closed');
            if (!$(this).next().is(":visible")) {
                $(this).next().slideDown(200);
                $(this).addClass('member__name--open');
                $(this).removeClass('member__name--closed');
            };
        });

    });
})()
//# sourceMappingURL=data:application/json;charset=utf8;base64,
